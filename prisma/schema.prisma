generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id                   String               @id @default(cuid())
  name                 String?
  email                String               @unique
  role                 ROLE                 @default(HACKER)
  emailVerified        DateTime?
  image                String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  travelReimbursementId String? @unique
  travelReimbursement   TravelReimbursement?
  accounts             Account[]
  Authenticator        Authenticator[]
  checkinsAsAdmin      Checkin[]            @relation("AdminCheckin")
  checkinsAsUser       Checkin[]            @relation("UserCheckedIn")
  ParticipantInfo      ParticipantInfo?
  scansAsAdmin         Scan[]               @relation("AdminScanner")
  scansAsUser          Scan[]               @relation("UserScanned")
  sessions             Session[]
  reimbursementGroupMemberships ReimbursementGroupMember[]
  createdReimbursementGroups ReimbursementGroup[] @relation("CreatorReimbursementGroup")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Event {
  id          String    @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  location    String?
  description String?
  eventType   EventType @default(REQUIRED)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  checkins    Checkin[]
  scans       Scan[]
}

model Scan {
  id         String   @id @default(cuid())
  userId     String
  eventId    String
  adminId    String
  checkinId  String?
  successful Boolean
  createdAt  DateTime @default(now())
  admin      User     @relation("AdminScanner", fields: [adminId], references: [id])
  checkin    Checkin? @relation(fields: [checkinId], references: [id])
  event      Event    @relation(fields: [eventId], references: [id])
  user       User     @relation("UserScanned", fields: [userId], references: [id])
}

model Checkin {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  adminId   String
  createdAt DateTime @default(now())
  admin     User     @relation("AdminCheckin", fields: [adminId], references: [id])
  event     Event    @relation(fields: [eventId], references: [id])
  user      User     @relation("UserCheckedIn", fields: [userId], references: [id])
  Scan      Scan[]
}

model ParticipantInfo {
  id                    String   @id @default(cuid())
  userId                String   @unique
  firstName             String
  lastName              String
  phoneNumber           String
  age                   Int
  genderIdentity        String
  race                  String
  hispanicOrLatino      String
  countryOfResidence    String
  isHighSchoolStudent   Boolean
  currentSchool         String?
  levelOfStudy          String?
  major                 String?
  minor                 String?
  previousHackathons    Int?
  tShirtSize            String
  dietaryRestrictions   String?
  specialAccommodations String?
  chaperoneFirstName    String?
  chaperoneLastName     String?
  chaperoneEmail        String?
  chaperonePhoneNumber  String?
  agreeHackKUCode       Boolean
  agreeMLHCode          Boolean
  shareWithMLH          Boolean
  receiveEmails         Boolean
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  resumeUrl             String?
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model TravelReimbursement {
  id                   String   @id @default(cuid())
  userId               String?  @unique
  user                 User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reimbursementGroupId String?  @unique  // Only the group leader submits this
  reimbursementGroup   ReimbursementGroup? @relation(fields: [reimbursementGroupId], references: [id], onDelete: Cascade)
  transportationMethod String
  address              String
  reason               String
  distance             Float
  estimatedCost        Float
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model ReimbursementGroup {
  id        String   @id @default(cuid())
  creatorId String  
  createdAt DateTime @default(now())
  creator User @relation("CreatorReimbursementGroup", fields: [creatorId], references: [id], onDelete: Cascade)
  members ReimbursementGroupMember[]
  reimbursement TravelReimbursement?
}

model ReimbursementGroupMember {
  id                   String  @id @default(cuid())
  userId               String  
  reimbursementGroupId String  
  status               ReimbursementGroupStatus @default(PENDING) // User's status in the group
  joinedAt             DateTime @default(now())
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group ReimbursementGroup @relation(fields: [reimbursementGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, reimbursementGroupId]) // Ensures a user is in only one group
}


enum EventType {
  FOOD
  REQUIRED
  WORKSHOPS
  SPONSOR
  ACTIVITIES
}

enum ROLE {
  HACKER
  ADMIN
  VOLUNTEER
}

enum ReimbursementGroupStatus {
  PENDING 
  ACCEPTED 
  DECLINED 
}
